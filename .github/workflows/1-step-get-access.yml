name: Getting Access 

# Common event triggers: pull_request, push, issues, issue_comment (feel free to experiment)
# Docs: https://docs.github.com/en/actions/using-workflows/events-that-trigger-workflows
on:
  workflow_dispatch:
  pull_request:
    branches:
      - main
  issue_comment:
    types: [created, edited]  

permissions:
  contents: read
  actions: write
  issues: write

env:
  STEP_2_FILE: ".github/steps/2-generate-and-build.md"

jobs:
  find_exercise:
    name: Find Exercise Issue
    uses: skills/exercise-toolkit/.github/workflows/find-exercise-issue.yml@v0.7.0

  # This job is optional. We often call it a "grading job". If the step is not graded, remove it.
  check_step_work:
    name: Check step work
    runs-on: ubuntu-latest
    needs: [find_exercise]
    env:
      ISSUE_REPOSITORY: ${{ github.repository }}
      ISSUE_NUMBER: ${{ needs.find_exercise.outputs.issue-number }}

    steps:
      - name: Checkout
        uses: actions/checkout@v5

      - name: Get response templates
        uses: actions/checkout@v5
        with:
          repository: skills/exercise-toolkit
          path: exercise-toolkit
          ref: v0.7.0

      - name: Find last comment
        id: find-last-comment
        uses: peter-evans/find-comment@v3
        with:
          repository: ${{ env.ISSUE_REPOSITORY }}
          issue-number: ${{ env.ISSUE_NUMBER }}
          direction: last

      - name: Update comment - checking work
        uses: GrantBirki/comment@v2.1.1
        with:
          repository: ${{ env.ISSUE_REPOSITORY }}
          issue-number: ${{ env.ISSUE_NUMBER }}
          comment-id: ${{ steps.find-last-comment.outputs.comment-id }}
          file: exercise-toolkit/markdown-templates/step-feedback/checking-work.md
          edit-mode: replace

      # START: Check practical exercise

      # replace-me: Example of a grading check. You can add more checks as needed.
      - name: Check for Specific Content in Comment
        id: check-comment
        uses: actions/github-script@v7
        with:
          script: |
            const keyword = "@kiwibank.co.nz";
            const commentBody = context.payload.comment.body;
            const commentId = context.payload.comment.id;
            if (commentBody.includes(keyword)) {
              console.log(`Comment contains keyword: ${keyword}`);
              return commentId;
            } else {
              console.log(`Comment does not contain keyword: ${keyword}`);
              return '';
            }
          result-encoding: string   
              
      - name: Do something if keyword found
        id: check-comment-content
        if: steps.check-comment.outputs.result != ''
        continue-on-error: true
        uses: GrantBirki/comment@v2.1.1
        with:
          comment-id: ${{ steps.check-comment.outputs.comment_id }}
          reactions: heart, hooray

      # replace-me: Example of a grading check. You can add more checks as needed.
      - name: Check if my-codeartifact-repos.json file exists
        id: check-file-exists
        continue-on-error: false
        uses: skills/exercise-toolkit/actions/file-exists@v0.7.0
        with:
          file: my-codeartifact-repos.json

      # replace-me: Example of a grading check. You can add more checks as needed.
      - name: Check for our corporate repo kb-repo in my-codeartifact-repos.json
        id: check-for-keyphrase
        continue-on-error: false
        uses: skills/action-keyphrase-checker@v1
        with:
          text-file: my-codeartifact-repos.json
          keyphrase: kb-repo

      - name: Update comment - step results
        uses: GrantBirki/comment@v2.1.1
        with:
          repository: ${{ env.ISSUE_REPOSITORY }}
          issue-number: ${{ env.ISSUE_NUMBER }}
          comment-id: ${{ steps.find-last-comment.outputs.comment-id }}
          edit-mode: replace
          file: exercise-toolkit/markdown-templates/step-feedback/step-results-table.md
          vars: |
            step_number: 2
            results_table:
              - description: "Checked if my-codeartifact-repos.json file exists"
                passed: ${{ steps.check-file-exists.outcome == 'success' }}
              - description: "Checked for kb-repo in my-codeartifact-repos.json"
                passed: ${{ steps.check-for-keyphrase.outcome == 'success' }}

      # END: Check practical exercise

      - name: Fail job if not all checks passed
        if: contains(steps.*.outcome, 'failure')
        run: exit 1


  post_next_step_content:
    name: Post next step content
    needs: [check_step_work]
    runs-on: ubuntu-latest
    env:
      ISSUE_REPOSITORY: ${{ github.repository }}
      ISSUE_NUMBER: ${{ needs.find_exercise.outputs.issue-number }}

    steps:
      - name: Checkout
        uses: actions/checkout@v5

      - name: Get response templates
        uses: actions/checkout@v5
        with:
          repository: skills/exercise-toolkit
          path: exercise-toolkit
          ref: v0.7.0

      - name: Create comment - step finished
        uses: GrantBirki/comment@v2.1.1
        with:
          repository: ${{ env.ISSUE_REPOSITORY }}
          issue-number: ${{ env.ISSUE_NUMBER }}
          file: exercise-toolkit/markdown-templates/step-feedback/step-finished-prepare-next-step.md
          vars: |
            next_step_number: 2
          
      - name: Create comment - add step content
        uses: GrantBirki/comment@v2.1.1
        with:
          repository: ${{ env.ISSUE_REPOSITORY }}
          issue-number: ${{ env.ISSUE_NUMBER }}
          file: ${{ env.STEP_2_FILE }}

      - name: Create comment - watching for progress
        uses: GrantBirki/comment@v2.1.1
        with:
          repository: ${{ env.ISSUE_REPOSITORY }}
          issue-number: ${{ env.ISSUE_NUMBER }}
          file: exercise-toolkit/markdown-templates/step-feedback/watching-for-progress.md

      - name: Disable current workflow and enable next one
        run: |
          gh workflow disable "${{github.workflow}}"
          gh workflow enable "Generate and Build"
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}